generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["pajak_admin", "pajak_general", "pajak_surat", "pajak_wasrik", "public", "storage"]
}

model DataReklame {
  id                        Int              @id @default(autoincrement())
  objek_pajak_id            Int
  is_reklame_pihak_ketiga   Boolean
  is_nilai_kontrak_wajar    Boolean?
  nilai_kontrak             BigInt?
  jenis_reklame_id          Int
  klasifikasi_ruang_id      Int
  klasifikasi_jalan_id      Int
  klasifikasi_sudut_id      Int
  waktu_penayangan          DateTime
  waktu_penayangan_berhenti DateTime
  jumlah                    Int
  ukuran_media              Int
  tinggi_media              Int
  is_nama_pengenal          Boolean
  is_lembaga_pendidikan     Boolean
  keterangan_lain           String?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime
  JenisReklame              JenisReklame     @relation(fields: [jenis_reklame_id], references: [id])
  KlasifikasiJalan          KlasifikasiJalan @relation(fields: [klasifikasi_jalan_id], references: [id])
  KlasifikasiRuang          KlasifikasiRuang @relation(fields: [klasifikasi_ruang_id], references: [id])
  KlasifikasiSudut          KlasifikasiSudut @relation(fields: [klasifikasi_sudut_id], references: [id])
  ObjekPajak                ObjekPajak       @relation(fields: [objek_pajak_id], references: [id])

  @@schema("pajak_admin")
}

model JenisReklame {
  id                       Int                        @id @default(autoincrement())
  nama                     String
  lama_masa                String?
  harga_dasar_ketinggian   Int
  parent_id                Int?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  DataReklame              DataReklame[]
  JenisReklame             JenisReklame?              @relation("JenisReklameToJenisReklame", fields: [parent_id], references: [id])
  other_JenisReklame       JenisReklame[]             @relation("JenisReklameToJenisReklame")
  Reklame_HargaDasarUkuran Reklame_HargaDasarUkuran[]

  @@schema("pajak_admin")
}

model JurnalDebit {
  id                        Int                        @id @default(autoincrement())
  objek_pajak_id            Int
  akun_objek_id             String
  akun_rincian_objek_id     String?
  akun_sub_rincian_objek_id String?
  debit                     BigInt?
  keterangan                String?
  TerbayarAt                DateTime
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime
  kode_bayar_id             String
  BaganAkun_Objek           BaganAkun_Objek            @relation(fields: [akun_objek_id], references: [id])
  BaganAkun_RincianObjek    BaganAkun_RincianObjek?    @relation(fields: [akun_rincian_objek_id], references: [id])
  BaganAkun_SubRincianObjek BaganAkun_SubRincianObjek? @relation(fields: [akun_sub_rincian_objek_id], references: [id])
  KodeBayar                 KodeBayar                  @relation(fields: [kode_bayar_id], references: [id])
  ObjekPajak                ObjekPajak                 @relation(fields: [objek_pajak_id], references: [id])
  JurnalKredit              JurnalKredit[]

  @@schema("pajak_admin")
}

model JurnalKredit {
  id                        Int                        @id @default(autoincrement())
  jurnal_debit_id           Int
  akun_objek_id             String
  akun_rincian_objek_id     String?
  akun_sub_rincian_objek_id String?
  kredit                    BigInt?
  keterangan                String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime
  BaganAkun_Objek           BaganAkun_Objek            @relation(fields: [akun_objek_id], references: [id])
  BaganAkun_RincianObjek    BaganAkun_RincianObjek?    @relation(fields: [akun_rincian_objek_id], references: [id])
  BaganAkun_SubRincianObjek BaganAkun_SubRincianObjek? @relation(fields: [akun_sub_rincian_objek_id], references: [id])
  JurnalDebit               JurnalDebit                @relation(fields: [jurnal_debit_id], references: [id])

  @@schema("pajak_admin")
}

model KlasifikasiJalan {
  id          Int           @id @default(autoincrement())
  nama        String
  skor        Int
  skor_bobot  Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  DataReklame DataReklame[]

  @@schema("pajak_admin")
}

model KlasifikasiRuang {
  id          Int           @id @default(autoincrement())
  nama        String
  skor        Int
  skor_bobot  Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  DataReklame DataReklame[]

  @@schema("pajak_admin")
}

model KlasifikasiSudut {
  id          Int           @id @default(autoincrement())
  nama        String
  skor        Int
  skor_bobot  Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  DataReklame DataReklame[]

  @@schema("pajak_admin")
}

model KodeBayar {
  id             String          @id
  npwpd          String
  jenis_pajak_id Int
  masa_awal      DateTime
  masa_akhir     DateTime?
  nominal        BigInt
  objek_pajak_id Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  kadaluarsa     DateTime
  terbayar       DateTime?
  nominal_sanksi BigInt?
  terbayar_id    String?
  surat_id       Int?
  JurnalDebit    JurnalDebit[]
  JenisPajak     JenisPajak      @relation(fields: [jenis_pajak_id], references: [id])
  ObjekPajak     ObjekPajak      @relation(fields: [objek_pajak_id], references: [id])
  Surat          Surat?          @relation(fields: [surat_id], references: [id])
  RiwayatSetoran RiwayatSetoran? @relation(fields: [terbayar_id], references: [id])
  SKPD           SKPD[]
  SPTPD          SPTPD[]

  @@schema("pajak_admin")
}

model KritikSaran {
  id           Int      @id @default(autoincrement())
  user_id      String
  subjek       String
  deskripsi    String
  upvoteUser   Json?
  donwvoteUser Json?
  status       String?
  createAt     DateTime @default(now())
  updateAt     DateTime

  @@schema("pajak_admin")
}

model LaporMasalah {
  id           Int      @id @default(autoincrement())
  user_id      String
  subjek       String
  deskripsi    String
  upvoteUser   Json?
  donwvoteUser Json?
  status       String?
  createAt     DateTime @default(now())
  updateAt     DateTime

  @@schema("pajak_admin")
}

model Reklame_HargaDasarNilaiStrategis {
  id          Int      @id @default(autoincrement())
  nilai_bawah Int?
  nilai_atas  Int?
  harga_dasar BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@schema("pajak_admin")
}

model Reklame_HargaDasarUkuran {
  id               Int          @id @default(autoincrement())
  jenis_reklame_id Int
  is_per_satuan    Boolean
  satuan           String
  nilai_bawah      Int?
  nilai_atas       Int?
  harga_dasar      BigInt
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  JenisReklame     JenisReklame @relation(fields: [jenis_reklame_id], references: [id])

  @@schema("pajak_admin")
}

model RiwayatSetoran {
  id             String      @id
  kode_bayar_id  String?
  referensi_lain String?
  nominal        BigInt
  createAt       DateTime    @default(now())
  updateAt       DateTime
  KodeBayar      KodeBayar[]

  @@schema("pajak_admin")
}

model InformasiKontak {
  id               Int           @id @default(autoincrement())
  badan_id         String?
  orang_pribadi_id String?
  email            String?
  nomor_hp         String?
  status           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  Badan            Badan?        @relation(fields: [badan_id], references: [id])
  OrangPribadi     OrangPribadi? @relation(fields: [orang_pribadi_id], references: [id])

  @@schema("pajak_general")
}

model JenisPajak {
  id                        Int                   @id @default(autoincrement())
  nama                      String
  nomor_rekening_pendapatan String?
  periode_masa              String?
  kode_pajak                String?
  hitung_sendiri            Boolean?
  tarif                     Float?
  KodeBayar                 KodeBayar[]
  ObjekPajak                ObjekPajak[]
  KegiatanPemeriksaan       KegiatanPemeriksaan[]

  @@schema("pajak_general")
}

model ObjekPajak {
  id                  Int           @id @default(autoincrement())
  nomor_objek_pajak   String?
  wajib_pajak_id      Int
  jenis_pajak_id      Int?
  nama_unik           String?
  terhapus            DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime
  RT                  String
  RW                  String
  alamat              String
  kode_desa_kelurahan String
  kode_kabupaten      String
  kode_kecamatan      String
  kode_provinsi       String
  koordinat           String?
  DataReklame         DataReklame[]
  JurnalDebit         JurnalDebit[]
  KodeBayar           KodeBayar[]
  JenisPajak          JenisPajak?   @relation(fields: [jenis_pajak_id], references: [id])
  Provinsi            Provinsi      @relation(fields: [kode_provinsi], references: [kode_provinsi])
  Kabupaten           Kabupaten     @relation(fields: [kode_provinsi, kode_kabupaten], references: [kode_provinsi, kode_kabupaten])
  Kecamatan           Kecamatan     @relation(fields: [kode_provinsi, kode_kabupaten, kode_kecamatan], references: [kode_provinsi, kode_kabupaten, kode_kecamatan])
  DesaKelurahan       DesaKelurahan @relation(fields: [kode_provinsi, kode_kabupaten, kode_kecamatan, kode_desa_kelurahan], references: [kode_provinsi, kode_kabupaten, kode_kecamatan, kode_desa_kelurahan])
  WajibPajak          WajibPajak    @relation(fields: [wajib_pajak_id], references: [id])
  SKPD                SKPD[]
  SPTPD               SPTPD[]

  @@schema("pajak_general")
}

model PengurusBadan {
  id               Int          @id @default(autoincrement())
  badan_id         String
  orang_pribadi_id String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  jabatan          String
  Badan            Badan        @relation(fields: [badan_id], references: [id], onDelete: Cascade)
  OrangPribadi     OrangPribadi @relation(fields: [orang_pribadi_id], references: [id], onDelete: Cascade)

  @@schema("pajak_general")
}

model StatusAktif {
  id             Int        @id @default(autoincrement())
  wajib_pajak_id Int
  nonaktif       DateTime
  aktif_kembali  DateTime?
  createdAt      DateTime   @default(now())
  UpdateAt       DateTime
  alasan         String
  referensi      String?
  WajibPajak     WajibPajak @relation(fields: [wajib_pajak_id], references: [id])

  @@schema("pajak_general")
}

model WajibPajak {
  id               Int           @id @default(autoincrement())
  orang_pribadi_id String?
  badan_id         String?
  NPWPD            String        @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  ObjekPajak       ObjekPajak[]
  StatusAktif      StatusAktif[]
  Badan            Badan?        @relation(fields: [badan_id], references: [id])
  OrangPribadi     OrangPribadi? @relation(fields: [orang_pribadi_id], references: [id])

  @@schema("pajak_general")
}

model SKPD {
  id                    Int        @id @default(autoincrement())
  nomor_urut            String?
  nomor_surat           String?
  kode_bayar_id         String?
  objek_pajak_id        Int
  masa_awal             DateTime?
  masa_akhir            DateTime?
  dasar_pengenaan_pajak BigInt?
  pajak_terhutang       BigInt?
  keterangan            String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime
  surat_id              Int
  KodeBayar             KodeBayar? @relation(fields: [kode_bayar_id], references: [id])
  ObjekPajak            ObjekPajak @relation(fields: [objek_pajak_id], references: [id])
  Surat                 Surat      @relation(fields: [surat_id], references: [id])

  @@schema("pajak_surat")
}

model SPTPD {
  id                Int        @id @default(autoincrement())
  nomor_urut        String?
  nomor_surat       String?    @unique
  objek_pajak_id    Int
  omzet             BigInt?
  pajak             BigInt?
  masa_awal         DateTime?
  masa_akhir        DateTime?
  keterangan        String?
  kode_bayar_id     String?
  surat_id          Int
  tanggal_pembuatan DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime
  KodeBayar         KodeBayar? @relation(fields: [kode_bayar_id], references: [id])
  ObjekPajak        ObjekPajak @relation(fields: [objek_pajak_id], references: [id])
  Surat             Surat      @relation(fields: [surat_id], references: [id])

  @@schema("pajak_surat")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Surat {
  id                 Int                  @id @default(autoincrement())
  keterangan         String?
  nomor_surat        String?              @unique
  createAt           DateTime             @default(now())
  updateAt           DateTime
  file_url           String?
  KodeBayar          KodeBayar[]
  SKPD               SKPD[]
  SPTPD              SPTPD[]
  ProgresPemeriksaan ProgresPemeriksaan[]

  @@schema("pajak_surat")
}

model AnggotaTimPemeriksaan {
  id             Int            @id @default(autoincrement())
  pegawai_id     String
  tim_id         Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  Pegawai        Pegawai        @relation(fields: [pegawai_id], references: [id])
  TimPemeriksaan TimPemeriksaan @relation(fields: [tim_id], references: [id])

  @@schema("pajak_wasrik")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model DokumentasiPemeriksaan {
  id                BigInt             @id @default(autoincrement())
  created_at        DateTime           @default(now()) @db.Timestamptz(6)
  jurnal_id         BigInt?
  keterangan        String?
  file_url          String?
  JurnalPemeriksaan JurnalPemeriksaan? @relation(fields: [jurnal_id], references: [id], onDelete: Cascade)

  @@schema("pajak_wasrik")
}

model JenisPemeriksaan {
  id        Int      @id @default(autoincrement())
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@schema("pajak_wasrik")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model JurnalPemeriksaan {
  id                      BigInt                   @id @default(autoincrement())
  created_at              DateTime                 @default(now()) @db.Timestamptz(6)
  tanggal                 DateTime                 @db.Timestamptz(6)
  lokasi                  String
  nama                    String
  keterangan              String
  kegiatan_pemeriksaan_id Int
  DokumentasiPemeriksaan  DokumentasiPemeriksaan[]
  KegiatanPemeriksaan     KegiatanPemeriksaan      @relation(fields: [kegiatan_pemeriksaan_id], references: [id], onDelete: Cascade)

  @@schema("pajak_wasrik")
}

model KategoriHasilPemeriksaan {
  id                  Int                   @id @default(autoincrement())
  keterangan          String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  KegiatanPemeriksaan KegiatanPemeriksaan[]

  @@schema("pajak_wasrik")
}

model KategoriProgresPemeriksaan {
  id                 Int                  @id @default(autoincrement())
  nama               String
  keterangan         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  ProgresPemeriksaan ProgresPemeriksaan[]

  @@schema("pajak_wasrik")
}

model KegiatanPemeriksaan {
  id                            Int                       @id @default(autoincrement())
  NPWPD                         String?
  nama_wp                       String?
  masa_pajak_awal               DateTime?
  masa_pajak_akhir              DateTime?
  keterangan                    String?
  jumlah_kenaikan               Int?
  persentase_kenaikan           Float?
  estimasi_presentasi_kenaikan  Float?
  jenis_pajak_id                Int?
  tim_id                        Int?
  createdAt                     DateTime                  @default(now())
  updatedAt                     DateTime                  @default(now())
  kategori_hasil_pemeriksaan_id Int?
  JurnalPemeriksaan             JurnalPemeriksaan[]
  JenisPajak                    JenisPajak?               @relation(fields: [jenis_pajak_id], references: [id])
  KategoriHasilPemeriksaan      KategoriHasilPemeriksaan? @relation(fields: [kategori_hasil_pemeriksaan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TimPemeriksaan                TimPemeriksaan?           @relation(fields: [tim_id], references: [id])
  ProgresPemeriksaan            ProgresPemeriksaan[]

  @@schema("pajak_wasrik")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ProgresPemeriksaan {
  id                         Int                        @id @default(autoincrement())
  surat_id                   Int?
  kegiatan_pemeriksaan_id    Int
  kategori_progres_id        Int
  nomor_surat                String?
  tanggal_surat              DateTime?
  keterangan                 String?
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @default(now())
  file_url                   String?
  KategoriProgresPemeriksaan KategoriProgresPemeriksaan @relation(fields: [kategori_progres_id], references: [id])
  KegiatanPemeriksaan        KegiatanPemeriksaan        @relation(fields: [kegiatan_pemeriksaan_id], references: [id])
  Surat                      Surat?                     @relation(fields: [surat_id], references: [id])

  @@schema("pajak_wasrik")
}

model TimPemeriksaan {
  id                    Int                     @id @default(autoincrement())
  nama                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  AnggotaTimPemeriksaan AnggotaTimPemeriksaan[]
  KegiatanPemeriksaan   KegiatanPemeriksaan[]

  @@schema("pajak_wasrik")
}

model Badan {
  id                  String            @id
  NIB                 String            @unique
  kode_provinsi       String
  kode_kabupaten      String
  kode_kecamatan      String
  kode_desa_kelurahan String
  RT                  String
  RW                  String
  alamat              String
  createdAt           DateTime          @default(now())
  nama_badan          String
  nomor_urut          Int               @default(autoincrement())
  updatedAt           DateTime          @default(now())
  InformasiKontak     InformasiKontak[]
  PengurusBadan       PengurusBadan[]
  WajibPajak          WajibPajak[]
  Provinsi            Provinsi          @relation(fields: [kode_provinsi], references: [kode_provinsi])
  Kabupaten           Kabupaten         @relation(fields: [kode_provinsi, kode_kabupaten], references: [kode_provinsi, kode_kabupaten])
  Kecamatan           Kecamatan         @relation(fields: [kode_provinsi, kode_kabupaten, kode_kecamatan], references: [kode_provinsi, kode_kabupaten, kode_kecamatan])
  DesaKelurahan       DesaKelurahan     @relation(fields: [kode_provinsi, kode_kabupaten, kode_kecamatan, kode_desa_kelurahan], references: [kode_provinsi, kode_kabupaten, kode_kecamatan, kode_desa_kelurahan])

  @@schema("public")
}

model BaganAkun_Akun {
  uraian_akun               String
  id                        String                      @id
  kode_akun                 String
  BaganAkun_Jenis           BaganAkun_Jenis[]
  BaganAkun_Kelompok        BaganAkun_Kelompok[]
  BaganAkun_Objek           BaganAkun_Objek[]
  BaganAkun_RincianObjek    BaganAkun_RincianObjek[]
  BaganAkun_SubRincianObjek BaganAkun_SubRincianObjek[]

  @@schema("public")
}

model BaganAkun_All {
  id                String  @id
  akun              String?
  kelompok          String?
  objek             String?
  rincian_objek     String?
  sub_rincian_objek String?
  uraian_akun       String
  jenis             String?

  @@schema("public")
}

model BaganAkun_Jenis {
  id                        String                      @id
  akun_id                   String
  kelompok_id               String
  uraian_akun               String
  kode_akun                 String
  kode_jenis                String
  kode_kelompok             String
  BaganAkun_Akun            BaganAkun_Akun              @relation(fields: [akun_id], references: [id])
  BaganAkun_Kelompok        BaganAkun_Kelompok          @relation(fields: [kelompok_id], references: [id])
  BaganAkun_Objek           BaganAkun_Objek[]
  BaganAkun_RincianObjek    BaganAkun_RincianObjek[]
  BaganAkun_SubRincianObjek BaganAkun_SubRincianObjek[]

  @@schema("public")
}

model BaganAkun_Kelompok {
  uraian_akun               String
  id                        String                      @id
  akun_id                   String
  kode_akun                 String
  kode_kelompok             String
  BaganAkun_Jenis           BaganAkun_Jenis[]
  BaganAkun_Akun            BaganAkun_Akun              @relation(fields: [akun_id], references: [id])
  BaganAkun_Objek           BaganAkun_Objek[]
  BaganAkun_RincianObjek    BaganAkun_RincianObjek[]
  BaganAkun_SubRincianObjek BaganAkun_SubRincianObjek[]

  @@schema("public")
}

model BaganAkun_Objek {
  uraian_akun               String
  id                        String                      @id
  akun_id                   String
  kelompok_id               String
  jenis_id                  String
  kode_akun                 String
  kode_jenis                String
  kode_kelompok             String
  kode_objek                String
  JurnalDebit               JurnalDebit[]
  JurnalKredit              JurnalKredit[]
  BaganAkun_Akun            BaganAkun_Akun              @relation(fields: [akun_id], references: [id])
  BaganAkun_Jenis           BaganAkun_Jenis             @relation(fields: [jenis_id], references: [id])
  BaganAkun_Kelompok        BaganAkun_Kelompok          @relation(fields: [kelompok_id], references: [id])
  BaganAkun_RincianObjek    BaganAkun_RincianObjek[]
  BaganAkun_SubRincianObjek BaganAkun_SubRincianObjek[]

  @@schema("public")
}

model BaganAkun_RincianObjek {
  uraian_akun               String
  id                        String                      @id
  akun_id                   String
  kelompok_id               String
  objek_id                  String
  jenis_id                  String
  kode_akun                 String
  kode_jenis                String
  kode_kelompok             String
  kode_objek                String
  kode_rincian_objek        String
  JurnalDebit               JurnalDebit[]
  JurnalKredit              JurnalKredit[]
  BaganAkun_Akun            BaganAkun_Akun              @relation(fields: [akun_id], references: [id])
  BaganAkun_Jenis           BaganAkun_Jenis             @relation(fields: [jenis_id], references: [id])
  BaganAkun_Kelompok        BaganAkun_Kelompok          @relation(fields: [kelompok_id], references: [id])
  BaganAkun_Objek           BaganAkun_Objek             @relation(fields: [objek_id], references: [id])
  BaganAkun_SubRincianObjek BaganAkun_SubRincianObjek[]

  @@schema("public")
}

model BaganAkun_SubRincianObjek {
  uraian_akun            String
  id                     String                 @id
  akun_id                String
  kelompok_id            String
  objek_id               String
  rincian_objek_id       String
  jenis_id               String
  kode_akun              String
  kode_jenis             String
  kode_kelompok          String
  kode_objek             String
  kode_rincian_objek     String
  kode_sub_rincian_objek String
  JurnalDebit            JurnalDebit[]
  JurnalKredit           JurnalKredit[]
  BaganAkun_Akun         BaganAkun_Akun         @relation(fields: [akun_id], references: [id])
  BaganAkun_Jenis        BaganAkun_Jenis        @relation(fields: [jenis_id], references: [id])
  BaganAkun_Kelompok     BaganAkun_Kelompok     @relation(fields: [kelompok_id], references: [id])
  BaganAkun_Objek        BaganAkun_Objek        @relation(fields: [objek_id], references: [id])
  BaganAkun_RincianObjek BaganAkun_RincianObjek @relation(fields: [rincian_objek_id], references: [id])

  @@schema("public")
}

model DesaKelurahan {
  kode_provinsi       String
  kode_kabupaten      String
  kode_kecamatan      String
  kode_desa_kelurahan String
  nama                String
  ObjekPajak          ObjekPajak[]
  Badan               Badan[]
  Provinsi            Provinsi       @relation(fields: [kode_provinsi], references: [kode_provinsi])
  Kabupaten           Kabupaten      @relation(fields: [kode_provinsi, kode_kabupaten], references: [kode_provinsi, kode_kabupaten])
  Kecamatan           Kecamatan      @relation(fields: [kode_provinsi, kode_kabupaten, kode_kecamatan], references: [kode_provinsi, kode_kabupaten, kode_kecamatan])
  OrangPribadi        OrangPribadi[]

  @@id([kode_provinsi, kode_kabupaten, kode_kecamatan, kode_desa_kelurahan])
  @@schema("public")
}

model Kabupaten {
  kode_provinsi  String
  kode_kabupaten String
  nama           String
  ObjekPajak     ObjekPajak[]
  Badan          Badan[]
  DesaKelurahan  DesaKelurahan[]
  Provinsi       Provinsi        @relation(fields: [kode_provinsi], references: [kode_provinsi])
  Kecamatan      Kecamatan[]
  OrangPribadi   OrangPribadi[]

  @@id([kode_provinsi, kode_kabupaten])
  @@schema("public")
}

model Kecamatan {
  kode_provinsi  String
  kode_kabupaten String
  kode_kecamatan String
  nama           String
  ObjekPajak     ObjekPajak[]
  Badan          Badan[]
  DesaKelurahan  DesaKelurahan[]
  Provinsi       Provinsi        @relation(fields: [kode_provinsi], references: [kode_provinsi])
  Kabupaten      Kabupaten       @relation(fields: [kode_provinsi, kode_kabupaten], references: [kode_provinsi, kode_kabupaten])
  OrangPribadi   OrangPribadi[]

  @@id([kode_provinsi, kode_kabupaten, kode_kecamatan])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OrangPribadi {
  id                  String            @id
  NIK                 String            @unique
  nama                String
  kode_provinsi       String
  kode_kabupaten      String
  kode_kecamatan      String
  kode_desa_kelurahan String
  RT                  String
  RW                  String
  alamat              String
  createdAt           DateTime          @default(now())
  nomor_urut          Int               @default(autoincrement())
  updatedAt           DateTime
  InformasiKontak     InformasiKontak[]
  PengurusBadan       PengurusBadan[]
  WajibPajak          WajibPajak[]
  Provinsi            Provinsi          @relation(fields: [kode_provinsi], references: [kode_provinsi])
  Kabupaten           Kabupaten         @relation(fields: [kode_provinsi, kode_kabupaten], references: [kode_provinsi, kode_kabupaten])
  Kecamatan           Kecamatan         @relation(fields: [kode_provinsi, kode_kabupaten, kode_kecamatan], references: [kode_provinsi, kode_kabupaten, kode_kecamatan])
  DesaKelurahan       DesaKelurahan     @relation(fields: [kode_provinsi, kode_kabupaten, kode_kecamatan, kode_desa_kelurahan], references: [kode_provinsi, kode_kabupaten, kode_kecamatan, kode_desa_kelurahan])

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Pegawai {
  id                    String                  @id
  nama_lengkap          String
  NIK                   String?                 @unique
  NIP                   String?                 @unique
  jabatan               String
  tanggal_masuk_kerja   DateTime
  tanggal_keluar_kerja  DateTime?
  alamat                String?
  nomor_telepon         String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  panggilan             String?
  user_id               String?                 @unique @db.Uuid
  golongan              String?
  bidang                bidang_bapenda?
  AnggotaTimPemeriksaan AnggotaTimPemeriksaan[]

  @@schema("public")
}

model Provinsi {
  nama          String
  kode_provinsi String          @id
  ObjekPajak    ObjekPajak[]
  Badan         Badan[]
  DesaKelurahan DesaKelurahan[]
  Kabupaten     Kabupaten[]
  Kecamatan     Kecamatan[]
  OrangPribadi  OrangPribadi[]

  @@schema("public")
}

model Wilayah {
  kode String  @id(map: "wilayah_pkey") @db.VarChar(13)
  nama String? @db.VarChar(100)

  @@index([nama], map: "wilayah_name_idx")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model buckets {
  id                         String                       @id
  name                       String                       @unique(map: "bname")
  owner                      String?                      @db.Uuid
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  public                     Boolean?                     @default(false)
  avif_autodetection         Boolean?                     @default(false)
  file_size_limit            BigInt?
  allowed_mime_types         String[]
  owner_id                   String?
  objects                    objects[]
  s3_multipart_uploads       s3_multipart_uploads[]
  s3_multipart_uploads_parts s3_multipart_uploads_parts[]

  @@schema("storage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model migrations {
  id          Int       @id
  name        String    @unique @db.VarChar(100)
  hash        String    @db.VarChar(40)
  executed_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("storage")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model objects {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bucket_id        String?
  name             String?
  owner            String?   @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  last_accessed_at DateTime? @default(now()) @db.Timestamptz(6)
  metadata         Json?
  path_tokens      String[]  @default(dbgenerated("string_to_array(name, '/'::text)"))
  version          String?
  owner_id         String?
  user_metadata    Json?
  buckets          buckets?  @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "objects_bucketId_fkey")

  @@unique([bucket_id, name], map: "bucketid_objname")
  @@index([bucket_id, name], map: "idx_objects_bucket_id_name")
  @@index([name], map: "name_prefix_search")
  @@schema("storage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model s3_multipart_uploads {
  id                         String                       @id
  in_progress_size           BigInt                       @default(0)
  upload_signature           String
  bucket_id                  String
  key                        String
  version                    String
  owner_id                   String?
  created_at                 DateTime                     @default(now()) @db.Timestamptz(6)
  user_metadata              Json?
  buckets                    buckets                      @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  s3_multipart_uploads_parts s3_multipart_uploads_parts[]

  @@index([bucket_id, key, created_at], map: "idx_multipart_uploads_list")
  @@schema("storage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model s3_multipart_uploads_parts {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  upload_id            String
  size                 BigInt               @default(0)
  part_number          Int
  bucket_id            String
  key                  String
  etag                 String
  owner_id             String?
  version              String
  created_at           DateTime             @default(now()) @db.Timestamptz(6)
  buckets              buckets              @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  s3_multipart_uploads s3_multipart_uploads @relation(fields: [upload_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("storage")
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum bidang_bapenda {
  sekretariat
  pimpinan
  penagihan
  pendataan
  wasrik
  ti

  @@schema("public")
}
